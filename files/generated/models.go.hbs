package generated

{{#with typeFormatArray}}
import (
{{#each this}}
    {{~#if (isAlltrue (equalAny this 'date,date-time') (isAbsent onceMap 'import time' 1))}}
    "time"{{/if}}
    {{~#if (isAlltrue (equalAny this 'binary,geometry') (isAbsent onceMap 'import custom-go/pkg/types' 1))}}
    "custom-go/pkg/types"{{/if}}
    {{~#equal this 'decimal'}}
    "github.com/shopspring/decimal"{{/equal}}
{{/each}}
)
{{/with}}
{{#each objectFieldArray}}{{#if (isAbsent onceMap (upperFirst (joinString '_' documentPath)) 1)}}
{{#if description}}// {{upperFirst (joinString '_' documentPath)}}
/*  {{description}} */{{/if}}
type {{upperFirst (joinString '_' documentPath)~}}
{{~#if additional}} {{#equal typeName 'array'}}[]{{else}}map[string]{{/equal~}}
{{~#with additional}}{{~> field_type this=this}}{{/with~}}
{{~else}} struct {
{{#each fields}}
    {{#if description}}/* {{description}} */
    {{/if}}{{upperFirst (trimPrefix name '_')}} {{#if isArray}}[]{{~/if~}}
{{~> field_type this=this}} `json:"{{name}}{{#unless required}},omitempty{{/unless}}"`
{{/each}}
}{{/if}}{{/if~}}
{{/each}}

{{#each enumFieldArray}}{{#if (isAbsent onceMap name 1)}}
type {{upperFirst name}} {{#if valueType}}{{> field_type_simple typeName=valueType}}{{else}}string{{/if}}
{{#if simpleFieldPointerRequired}}var{{else}}const{{/if}} (
{{#each values}}
    {{#if valueDescriptionMap}}{{#with (getMapValue valueDescriptionMap this)}}// {{upperFirst name}}_{{../this}} {{this}}
    {{/with}}{{/if}}{{upperFirst name}}_{{this}} {{upperFirst name}} = {{#if (equalAny valueType ',string')}}"{{this}}"{{else}}{{this}}{{/if}}
{{/each}}
)
{{#if valueDescriptionMap}}
var {{upperFirst name}}DescMap = map[{{upperFirst name}}]string{
    {{#each values}}{{#with (getMapValue valueDescriptionMap this)~}}
    {{upperFirst name}}_{{../this}}: "{{this}}",
    {{/with}}{{/each}}
}
func (e {{#if simpleFieldPointerRequired}}*{{/if}}{{upperFirst name}}) String() string {
    return {{upperFirst name}}DescMap[{{#if simpleFieldPointerRequired}}*{{/if}}e]
}
{{/if}}{{/if~}}
{{/each}}