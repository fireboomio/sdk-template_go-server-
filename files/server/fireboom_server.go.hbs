package server

import (
    "github.com/joho/godotenv"
    "custom-go/pkg/plugins"
    "custom-go/pkg/types"
{{#with hooksConfiguration}}
    {{#if authentication}}"custom-go/authentication"{{/if}}
    {{#if global.httpTransport}}"custom-go/global"{{/if}}
    {{#if (isAnyTrue (isNotEmpty queries) (isNotEmpty mutations) (isNotEmpty subscriptions))}}
        {{#if (isAbsent onceMap 'custom-go/generated' true)}}
    "custom-go/generated"
        {{/if}}
        {{#each queries as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{~/each}}
        {{#each mutations as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{~/each}}
        {{#each subscriptions as |operationConf operationName|}}
    operation_{{replaceSpecial operationName "__"}} "custom-go/operation/{{operationName}}"
        {{~/each}}
    {{/if~}}
{{/with}}
{{#each s3Providers}}
    {{#each uploadProfiles}}
        {{~#if (isAnyTrue hooks.preUpload hooks.postUpload)}}
    {{#if (isAbsent onceMap 'custom-go/generated')}}"custom-go/generated"{{/if}}
    {{fmtSprintf 'storage_%s_%s' name @key}} "{{fmtSprintf 'custom-go/storage/%s/%s' name @key}}"
        {{~/if}}
    {{/each}}
{{/each}}
)

func init() {
    _ = godotenv.Overload("{{nodeEnvFilepath}}")
    {{#with hooksConfiguration}}
        {{#each queries as |hooks operationName|}}{{#with (replaceSpecial operationName "__")}}{{#each hooks}}
    generated.{{upperFirst ../this}}.RegisterHook(types.MiddlewareHook_{{this}}, operation_{{../this}}.{{upperFirst this}})
        {{~/each}}{{/with}}{{/each}}
        {{#each mutations as |hooks operationName|}}{{#with (replaceSpecial operationName "__")}}{{#each hooks}}
    generated.{{upperFirst ../this}}.RegisterHook(types.MiddlewareHook_{{this}}, operation_{{../this}}.{{upperFirst this}})
        {{~/each}}{{/with}}{{/each}}
        {{#each subscriptions as |hooks operationName|}}{{#with (replaceSpecial operationName "__")}}{{#each hooks}}
    generated.{{upperFirst ../this}}.RegisterHook(types.MiddlewareHook_{{this}}, operation_{{../this}}.{{upperFirst this}})
        {{~/each}}{{/with}}{{/each}}
    {{/with}}
    {{~#each s3Providers}}{{#if uploadProfiles}}{{#each uploadProfiles as |data profile|}}{{#each hooks as |enabled hook|}}{{#if enabled}}
    plugins.RegisterUploadHook[generated.{{upperFirst (fmtSprintf '%s_%sProfileMeta' ../name profile)}}]("{{../name}}", "{{profile}}", types.UploadHook_{{lowerFirst hook}}, {{fmtSprintf 'storage_%s_%s' ../name profile}}.{{upperFirst hook}})
    {{~/if}}{{/each}}{{/each}}{{~/if}}{{/each}}

    plugins.WdgHooksAndServerConfig = plugins.WunderGraphHooksAndServerConfig{
        Hooks: plugins.HooksConfiguration{
    {{#with hooksConfiguration}}
            Global: plugins.GlobalConfiguration{
        {{#if global.httpTransport}}
                HttpTransport: plugins.HttpTransportHooks{
                {{#each global.httpTransport as |conf hookName|}}
                    {{upperFirst hookName}}: global.{{upperFirst hookName}},
                {{/each}}
                },
                {{#if global.wsTransport}}
                WsTransport: plugins.WsTransportHooks{
                    OnConnectionInit: global.OnConnectionInit,
                },
                {{/if}}
        {{/if}}
            },
            Authentication: plugins.AuthenticationConfiguration{
        {{#each authentication}}
                {{upperFirst this}}: authentication.{{upperFirst this}},
        {{/each}}
            },
        },
    {{/with}}
    }
}
